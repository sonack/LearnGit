文件长格式输出:
-rw-r--r-- 访问权限  -开头说明是一个普通文件 d表示是目录
文件所有者 文件所属组成员 其他所有人

1 硬链接数目

root 文件属主名字 root 文件所属用户组的名字
32059
字节数 表示的文件大小
2007-04-03 11:05 上一次修改时间


file 命令确定文件类型


b 向前翻页
f 向后翻页
G 最后一行
1G g 第一行
/字符 查找
n 下一个
h 帮助
q 退出


/ 根目录

/bin 包含系统启动和运行所必需的二进制程序

/boot 包含Linux内核 和启动加载程序 RMA磁盘映像
/boot/grub/grub.conf or menu.lst 配置启动加载程序
/boot/vmlinuz linux内核

/dev 包含设备结点

/etc
配置文件 一系列shell脚本 系统启动时 这些脚本会运行系统的每个服务。

/etc/crontab 定义自动运行的任务
/etc/fstab 包含存储设备的列表 以及与他们相关的挂载点
/etc/passwd 包含用户账户列表

/home 系统在/home下为每一个用户分配一个目录 普通用户只能在他们自己的目录下创建文件。

/lib 包含核心系统程序所需的库文件 类似于windows中的动态链接库

/media 包含可移除设备的挂载点 如USB CD-ROMS自动挂载到这个目录下。

/mnt 早期linux系统中 挂在可移除设备的目录.

/opt 可选软件 主要用来存储可能安装在系统的商业软件产品。

/proc 虚拟文件系统 内核的窥视孔 可读
/root root账户的家目录
/sbin 重大系统任务的二进制文件 为超级用户保留
/tmp 存储临时文件 配置 每次重启都会清空这个目录
/usr 普通用户所需要的程序和软件

/usr/bin 包含系统安装的可执行程序 
/usr/lib 包含由/usr/bin目录中程序所用到的共享库

/usr/local 由源码编译的程序会安装到/usr/local/bin目录。
/usr/sbin 包含许多系统管理程序
/usr/share 包含由/usr/bin/中程序使用的共享数据 
/usr/share/doc 软件文档
/var 需要经常改动的文件存储的地方
/var/log 包含日志文件




通配符:
* 匹配任意多个字符
? 匹配任意一个字符
[abcd123] 匹配abcd123中任意一个字符
[!abc] 匹配不是abc的任意一个字符
[[:class:]] 匹配任意一个属于指定字符类中的字符
字符类:
[:alnum:] 任意一个字母或数字
[:alpha:] 任意一个字母
[:digit:] 任意一个数字
[:lower:] 任意一个小写字母
[:upper:] 任意一个大写字母

传统Unix表示法: [A-Z] [a-z] [0-9]
GUI中使用通配符

mkdir directory ...
cp item1 item2 
cp item... directory


-a --archive  复制文件和目录及其属性
-i --interactive  重写前提示 否则默认覆盖
-r --recursive 递归的复制目录及其内容 当复制目录时 需要-r 或者 -a
-u --update 只复制目标地址中不存在的文件或者文件内容更新的文件
-v --verbose 显示翔实的命令操作信息

重命名或移动文件
mv item1 item2
mv item... directory

rm 删除文件或目录
-f 忽视不存在的文件

ln file link 创建硬链接
ln -s item link 创建符号链接
硬链接局限:
1.不能关联它所在文件系统之外的文件
2.不能关联一个目录

GUI 创建符号链接 Ctrl + Shift

命令:
1.可执行程序
2.内建shell命令 bash支持若干命令 如cd
3.shell函数: 小规模shell脚本 混合到环境变量中
4.命令别名

type command 显示命令的类型

which 可执行文件 命令别名是针对真正的命令的可执行程序 --显示一个可执行程序的位置

help - 得到shell内部命令的帮助文档
help 内部命令名
如 help cd
cd: cd[-L|-P] [dir]
[] 表示可选 | 表示互斥

--help 选项 显示命令所支持的语法和选项说明
man 显示程序手册页
man program

man 章节号 程序名
如 man 5 passwd

apropos 显示合适的命令
man -k = apropos

whatis 显示非常简洁的命令说明
info 显示程序Info条目
info文件阅读器 超链接 *号标示 光标放在上面并按下enter键

alias 查看所有定义在系统环境中的别名
多个命令一起执行 用;分隔
type foo ==> not found
alias foo="command..." 
删除 unalias foo

重定向
>  重定向stdout
>> 追加
文件描述符0(stdin) 1(stdout) 2(stderr)
2> 重定向stderr
&> 重定向stdout和stderr (或者用 > filename 2>&1 )

位存储桶 接受输入 /dev/null
2> /dev/null

cat < lazy_dog.txt 重定向stdin

cat 连接文件
cat file1 file2 ... 连接后到标准输出
可以用cat 来显示文件而没有分页
cat 空参数 连接到键盘
Ctrl+d 输入EOF

管道线
一个命令标准输出管道到另一个命令的标准输入
command1 | command2
| less
过滤器: sort uniq 删除重复行 -d 显示重复行

wc 打印行、字、字节数
-l 只报道行数 

grep 打印匹配行
grep pattern [file...]
-i 忽略大小写
-v 只打印不匹配的行

head 打印文件的前10行
tail 打印文件的后10行 tail的-f选项 实时监测文件内容 Ctrl+C 退出
-n 指定打印的行数
| tail -n 5

tree 从stdin读取数据,并同时输出到stdout和文件
ls /usr/bin | tee ls.txt | grep zip 捕捉内容到ls.txt

Shell特性
字符展开:
echo this is a text
echo *
波浪线展开:
~ 当前用户家目录
~user user的家目录
算术表达式展开
$((expression))
+ - × /(整数除法) ** 取幂
花括号展开
echo Front-{A,B,C}-Back
{1..5}
{Z..A}

参数展开
echo $USER
查看有效的变量列表 printenv

命令替换
echo $(ls) 把一个命令的输出作为一个展开模式来使用
旧语法 用倒引号代替美元符号和括号
ls -l `which cp`
引用
echo hello    world   单词分割  显示 hello world
双引号中  参数展开，算术表达式和命令替换仍然有效 echo "hello   world" 不会单词分割
单引号 禁用所有的展开

转义字符:
\$ \a
倒数计时器
-e 选项解释转义序列 或者可以将转移序列放在$''里面
sleep 10;echo -e "Time's up\a"
或者 sleep 10;echo "Time's up" $'\a'

键盘高级操作技巧:
clear 清空屏幕
history 显示历史列表内容
移动光标
Ctrl + a 移动到行首
Ctrl + e 移动到行尾
Ctrl + f =右键头
Ctrl + b =左箭头
Alt + f 光标前移一个字
Alt + b 光标后移一个字
Ctrl + l 清空屏幕 光标移动到左上角 等同于clear命令

修改文本
Ctrl + d 移动光标位置的字符
Ctrl + t 光标位置的字符和前面的字符互换位置
Alt + t 光标位置的字和前面的字互换位置
Alt + l 从光标位置到字尾的字符转换成小写字母
Alt + u 从光标位置到字尾的字符转换成大写字母

剪切(killing)和黏贴(yanking)文本
Ctrl + k 剪切从光标到行尾的文本
Ctrl + u 剪切从光标位置到行首的文本
Alt + d 剪切从光标位置到词尾的文本
Alt + backspace 剪切从光标位置到词头的文本。如果光标在一个单词的开头 则剪切前一个单词。
Ctrl + y 把剪切环(kill-ring)中的文本黏贴到光标位置
元键:在现代键盘上 一般指Alt建

自动补全:
路径名 变量 用户名 命令 主机名(/etc/hosts)
Alt+? 显示可能的自动补全列表 或者按两次Tab键
Alt+* 插入所有可能的自动补全

命令历史列表保存在家目录下的.bash_history文件里
搜索历史命令
history | less 浏览历史命令
默认会存储输入的最后500个命令。
history | grep /usr/bin
历史命令展开 !88 展开历史第88号命令
Ctrl + r 启动递增搜索  Enter执行 Ctrl + j 复制到当前命令行
Ctrl + g 或者 Ctrl + c 退出搜索 再次Ctrl + r 找到下一个匹配项

操作历史列表的按键组合:
Ctrl+p 移动到上一条，类似上箭头按键;
Ctrl+n 移动到下一条，类似下箭头按键;
Alt+< 移动到历史列表开头。
Alt+> 移动到历史列表结尾。
Ctrl+r 反向递增搜索
Alt+p 反向搜索
Alt+n 正向搜索
Ctrl+o 执行历史列表中的当前项，并移动到下一个。可以用来执行一系列历史列表中的命令。

历史记录展开:
!! 重复执行最后一次命令。
!number 重复执行历史列表中的第number行的命令。
!string 重复执行历史列表中以这个字符串开头的命令。
!?string 重复执行历史列表中包含这个字符串的命令。

script 命令 可以记录终端里发生的一切 用exit保存退出


权限

id ---显示用户身份号
chmod ---更改文件模式
umask ---设置默认的文件权限
su ---以另一个用户的身份运行shell
sudo ---以另一个用户的身份执行命令
chown ---更改文件所有者
chgrp ---更改文件组所有权
passwd ---更改用户密码

用户账户定义在/etc/passwd
用户组定义在/etc/group
用户密码信息在/etc/shadow

chmod命令
1.八进制表示法:
chmod number file 
2.符号表示法:
u:所有者user
g:用户组group
o:其他所有人others
a:all = u + g + o
默认是a
chmod u+x filename
chmod u-rw filename
chmod o=rwx,g+x filename
--recursive选项 可以同时作用于文件和目录
GUI设置文件权限
umask 
控制文件的默认权限
表示删除一个位掩码
原始文件属性rw-rw-rw-
默认umask 0002

授予程序setuid权限:
chmod u+s program
授予目录setgid权限:
chmod g+s dir
授予目录sticky权限:
chmod +t dir 阻止用户删除或重命名文件。

su -l snk 为指定用户启动一个需要登陆的shell
-l 可以缩写为-
如果不指定用户 就假定为超级用户
su -

su - snk -c 'command' 执行单个命令


sudo:以另一个用户的身份来执行命令
ubuntu:
root账号的密码设置:
sudo passwd root
root可以省略

chown 更改文件所有者和用户组
chown [owner][:[group]] file...
bob: 文件所有者改为用户bob，文件用户组改为bob登陆系统时，所属的用户组

chgrp 更改用户组所有权
旧版Unix系统中，chown只能修改文件所有权，而不是用户组所有权。
为了达到目的，使用一个独立的命令chgrp。

adduser
useradd
groupadd
命令来创建和维护用户和用户组

进程
ps -- 报告当前进程快照
top -- 显示任务
jobs -- 列出活跃的任务
bg -- 把一个任务放到后台执行
fg -- 把一个任务放到前台执行
kill -- 给一个进程发送信号
killall -- 杀死指定名字的进程
shutdown -- 关机或重启系统

系统启动
内核初始化自己的程序为进程
运行init程序
运行一系列称为init脚本的shell脚本(位于/etc) 启动所有的系统服务(很多以deamon守护程序形式实现)
PID 按升序分配 init进程的PID总是1

ps 列出与当前终端会话相关的进程 
ps x 展示所有进程
TTY = teletype 进程的控制终端 ?表示没有控制终端
STAT = state 进程的状态
R 运行
S 休眠 等待事件 比如按键或者网络数据包
D 不可中断休眠 等待IO
T 已停止
Z 僵尸进程 已经终止的子进程，但是它的父进程还没有清空它(父进程没有把子进程从进程表中删除)
< 一个高优先级进程 (niceness) less nice
N 低优先级进程 好进程

ps aux
USER 进程所有者的用户ID
VSZ 虚拟内存大小
%CPU %MEM 以百分比表示的CPU、内存使用率
RSS 进程占用的物理内存大小 以千字节为单位
START 进程的运行起始时间 若超过24小时，则用天表示

top命令动态查看进程
默认情况下 每3秒种更新一次

xlogo
X窗口系统的实例程序
Ctrl+C 中断一个进程

xlogo & 后台运行

[1] 28236
工作号 PID
ps命令可以看到我们的进程
jobs 列出从终端中启动的任务 

进程返回到前台
jobs
fg %1 工作号(jobspec)

停止一个进程
Ctrl+z 
fg %1
bg %1
恢复到前台或者后台继续运行
如果只有一个任务 jobspec可有可无

Signals
kill命令 杀死程序
kill PID 或者 %jobspec
kill发送信号 信号是操作系统和程序之间进行通信所采用的几种方式中的一种。
Ctrl+C 发送INT信号
Ctrl+Z 发送TSTP(终端停止)的信号
kill命令用来发送信号
kill [-signal] PID...
默认发送TERM(终止)信号

1.HUP:挂起 当发送这个信号到一个守护进程后，这个进程会重新启动，并重新读取它的配置文件。Apache网络服务器守护进程就是一个例子。
2.INT: 中断 用来终止一个程序。
9.KILL: 从不发送KILL信号到目标进程，而是由内核立刻终止这个进程，该进程没有机会去做"清理"工作或"保存"工作。
15.TERM:终止
18.CONT:继续。停止一段时间后，进程恢复运行。
19.STOP:停止。停止运行而没有终止，像KILL信号，它不被发送到目标进程，因此它不能被忽略。
kill -数字 或者-SIG+名字 (PID || %jobspec)
通过kill命令来给进程发送信号,必须是程序的所有者或者超级管理员。
其他信号:
3.QUIT:退出
11.SEGV:段错误,程序非法使用内存。
20.TSTP:停止，向目标进程发送，可能被忽略。等价于Ctrl+z。
28.WINCH:改变窗口大小。当改变窗口大小时，系统会发送这个信号。一些程序，如top或者less会相应这个信号，按照新窗口的尺寸，刷新显示的内容。
kill -l 显示完整的信号列表

killall命令给多个进程发送信号
killall [-u user] [-signal] name...

更多命令:
pstree 输出一个树形结构的进程列表，这个列表展示了进程间父/子关系。
vmstat 输出一个系统资源使用快照，包括内存，交换分区和磁盘I/O.为了看到连续的显示效果，在命令名后加上延时的时间(以秒为单位)，如vmstat 5。Ctrl+C终止输出。
xload 图形界面程序画出系统负载的图形
tload 终端中画出系统负载的图形 Ctrl+C终止输出

shell环境
两种数据
环境变量 shell变量(bash存放的少量数据)
可编程数据:1.别名2.shell函数
set 显示shell和环境变量、定义的shell函数
printenv 只显示环境变量

printenv USER 列出特定变量的数值
echo $USER

有趣的变量:
DISPLAY:显示器的名字，通常是":0"，代表由X产生的第一个显示器。
EDITOR:文本编辑器的名字。
SHELL:shell程序的名字。
HOME:用户家目录。
LANG:定义了字符集以及语言编码方式。
OLD_PWD:先前的工作目录。
PAGER:页输出程序的名字，经常为/usr/bin/less
PATH:由冒号分开的目录列表，当输入可执行程序名后，会搜索这个目录列表。
PS1:Prompt String 1. 定义了shell提示符的内容。
PWD:当前工作目录
TERM:终端类型名。类Unix的系统支持许多终端协议，这个变量设置你的终端仿真器所用的协议。
TZ:时区 大多数类Unix系统按照UTC维护计算机内部时钟，然后应用一个由这个变量指定的偏差来显示本地时间。
USER:你的用户名
【因发行版本不同而不同】

SHELL环境的建立
登陆系统==>启动bash程序==>读取一系列称为启动文件的配置脚本(定义了默认的可供所有用户共享的shell环境)==>读取位于自己家目录下的启动文件(定义了用户个人的shell环境)
两种shell会话类型:
1.登陆shell会话:
会读取一个或多个启动文件:
/etc/profile	应用于所有用户的全局配置脚本
~/.bach_profile 用户私人的启动文件，可以用来扩展或者重写全局配置脚本中的设置
~/.bash_log	如果文件'~/.bash_profile'没有找到，bash会尝试读取这个脚本
~/.profile	如果'~/bash_profile'或者'/.bash_login'都没有找到，bash会尝试读取这个文件。这是基于Debian发行版的默认设置，比如Ubuntu

2.非登录shell会话:
读取以下启动文件:
/etc/bash.bashrc 应用于所有用户的全局配置文件
~/.bashrc	 用户私有的启动文件。可扩展、重写全局脚本设置。

非登录shell会话会继承它们父进程的环境设置，通常是一个登录shell

重要文件:~/.bashrc 非登录shell默认读取 大多数登录shell启动文件会以能读取～/.bashrc文件的方式来书写。
附加目录到PATH末尾: PATH=$PATH:$HOME/bin 利用参数展开
一些Debian系如Ubuntu 登录时会监测～/bin是否存在，若存在则动态添加到PATH中export PATH #告诉shell让shell子进程可以使用PATH变量


修改哪个文件?
修改PATH变量或者定义额外的环境变量 要放到.bash_profile文件或其替代文件.profile文件中,其他更改应该放到.bashrc文件中。

强迫bash读取.bashrc文件
source .bashrc

自定制shell提示符
提示符由一个环境变量PS1(Prompt String One)定义的
利用非打印字符序列控制颜色:
\[\033[0;30m\033[1;47m\]

文本属性:
正常(0)
粗体(1)
下划线(4)
闪烁(5) 许多终端仿真器拒绝使用这个闪烁属性
反向(7)
PS1='\[\033[s\033[0;0H\033[0;41m\033[K\033[1;33m\t\033[0m\033[u\]<\u@\h \W>\$ '
可以保存到.bashrc文件中
cp .bashrc .bashrc.bak 备份

软件包管理
包管理技术阵营:Debian的".deb"和红帽的".rpm"
Debian-Style  底层工具:dpkg 上层工具: apt-get、aptitude
Fodora、RedHatEnterPriseLinux、CentOS  底层工具:rpm  上层工具:yum

查找资料库(源)中的软件包
Debian:
apt-get update;
apt-cache search search_string
Red Hat:
yum search search_string

从源中安装一个软件包
Debian:
apt-get update;
apt-get install package_name

Red Hat:
yum install package_name


通过软件包文件来安装软件:
Debian: dpkg --install package_file
Red Hat: rpm -i package_file
没有运行依赖解析，如果发现缺少依赖，会报错而退出
通过软件包文件来升级软件:
Debian: dpkg --install package_file
Red Hat: rpm -U package_file
注意:dpkg安装和更新是一样的 而rpm选项不一样

卸载软件:
Debian: apt-get remove package_name
Red Hat: yum erase package_name

更新软件:
Debian: apt-get update; apt-get upgrade
Red Hat: yum update

列出所安装的软件包:
Debian: dpkg --list
Red Hat: rpm -qa

确定是否安装了一个软件包:
Debian: dpkg --status package_name
Red Hat: rpm -q package_name

显示所安装的软件包的信息
Debian: apt-cache show package_name
Red Hat: yum info package_name

查找哪个软件包安装了某个文件
Debian: dpkg --search file_name
Red Hat: rpm -qf file_name

存储媒介:
mount --挂载一个文件系统
umount --卸载一个文件系统
fsck --检查和修复一个文件系统
fdisk --分区表控制器
mkfs --创建文件系统
fdformat --格式化一张软盘
dd --把面向块的数据直接写入设备
genisoimage(mkisofs) --创建一个ISO 9660映像文件
wodim(cdrecord) --把数据写入光存储媒介
md5sum --计算MD5校验码

挂载:把设备连接到文件系统树
/etc/fstab 列出系统启动时要挂载的设备(如硬盘分区).
1.设备名
2.挂载点
3.文件系统类型
4.选项:挂载方式(只读、阻止执行任何程序等的文件系统)
5.频率:指定是否及何时用dump命令备份一个文件系统
6.次序:指定fsck命令按照什么次序来检查文件系统
查看挂载的文件系统:
mount 不带参数

su -
umount /dev/sr0
mkdir /mnt/cdrom
mount -t iso9660 /dev/sr0 /mnt/cdrom
-t选项用来指定文件系统类型

cd /mnt/cdrom; ls

卸载时要离开挂载点目录 否则设备忙
umount /dev/sr0

确定设备名:
/dev/fd*  软盘驱动器
/dev/hd* 老系统中的IDE(PATA)硬盘
/dev/lp* 打印机
/dev/sd* SCSI磁盘
/dev/sr* 光盘(CD\DVD读取器和烧录器)

符号链接: /dev/cdrom  /dev/dvd  /dev/floppy
如果工作系统不能自动挂载可移动设备，可以这样来确定其设备名:
首先 实时查看文件 /var/log/syslog
tail -f
设备名称会保持不变，只要设备与计算机保持连接并且计算机不会重新启动。

创建新的文件系统
卸载:sudo umount /dev/sdb1
sudo fdist /dev/sdb
指定的设备名要是整个设备的名称，而不是某个分区
用mkfs(make file system)创建一个新的文件系统
sudo mkfs -t ext3 /dev/sdb1
格式化为FAT32文件系统 指定vfat作为文件系统类型
sudo mkfs -t vfat /dev/sdb1

测试和修复文件系统
fsck(file system check) 在系统启动时检查文件系统的完整性
若最后一个数字是0 代表不会被检查
fsck还可以修复受损的文件系统
在类Unix操作系统中，文件恢复的部分被放置在lost+found目录里面，位于每个文件系统的根目录下面
sudo fsck /dev/sdb1

格式化软盘:
sudo fdformat /dev/fd0
sudo mkfs -t msdos /dev/fd0
msdos 文件系统 旧的(小的)文件分配表。

直接把数据移入/出设备
dd if=input_file of=output_file [bs=block_size [count=blocks]]
dd if=/dev/sdb of=/dev/sdc
dd if=/dev/sdb of=flash_drive.img
慎用!!

创建CD-ROM映像

创建映像拷贝:
dd if=/dev/cdrom of=ubuntu.iso
也适用于DVD光盘，但不适用于音频CD，因为音频CD不使用文件系统来存储数据。
对于音频CD，可以看一下cdrdao命令
从文件集合创建一个映像
genisoimage程序
genisoimage -o cd-rom.iso -R -J ~/cd-rom-files
-R 添加元数据为Rock Ridge扩展 允许使用长文件名和POSIX风格的文件权限;
-J 使Joliet扩展生效 这样Windows中就支持长文件名了

mkiosfs cdrecord
是流行软件包"cdrtools"的一部分
替代程序 分别是 genisoimage wodim

写入CD-ROM镜像
直接挂在ISO镜像
-o loop 
mkdir /mnt/iso_image
mount -t iso9660 -o loop image.iso /mnt/iso_image

擦除一张可重写入的CD-ROM
wodim dev=/dev/cdrw blank=fast #清空的类型
写入镜像
wodim dev=/dev/cdrw image.iso
-v详细输出 --dao 以disk-at-once模式写入光盘，适用于商业复制。
默认模式是track-at-once 适用于录制音乐
验证iso映像文件的完整性
md5sum image.iso

网络系统
ping: 发送特殊的数据包 IMCPECHO_REQUEST 
ping www.baidu.com
^+C 
tracepath(traceroute)
显示从本地到指定主机要经过的所有跳板路由器
netstat
查看检查各种各样的网络设置和统计数据
-ie 查看系统中的网络接口
-r 查看内核的网络路由表

网络中传输文件
ftp://run.hit.edu.cn
anonymous 匿名服务器
ls 列出远端系统中的目录
cd 在远端系统中跳转
lcd 在本地系统中跳转
get file_name 从远端系统把file_name文件下载到本地系统的当前工作目录中
bye 退出远端服务器，也可以用quit或者exit

lftp 支持更多额外的便捷特性，如下载失败后自动重新下载，Tab补全，多协议(HTTP)支持等等

另一个流行的下载文件的命令行程序是wget
wget http://www.baidu.com 可以下载整个网页

与远程主机安全通信
SSH
1.认证远程主机 2.加密信息
Ubuntu:默认只包含客户端服务 服务端需要安装OpenSSH-server软件包
sudo apt-get install openssh-server
ps -e | grep ssh
ifconfig 查看IP地址
手动启动:
sudo /etc/init.d/ssh start
端口号默认是22
ssh remote-sys
ssh bob@remote-sys
远端主机没有通过验证: ~/.ssh/known-hosts 删除废弃的钥匙
ssh remote-sys free 在远端系统执行单个命令
ssh remote-sys 'ls \*' > dirlist.txt
ssh remote-sys 'ls \*  > dirlist.txt'
X窗口系统
ssh -X remote-sys
xload
或者是-Y选项

scp && sftp
scp remote-sys:document.txt .
如果所期望的远端主机账户与你本地系统中的不一致，可以把用户名添加到远端主机名的开头
scp bob@remote-sys:document.txt .

sftp
使用安全加密的SSH通道的类似ftp的程序
它不需要远端主机运行FTP服务器，仅仅要求SSH服务器。
sftp remote-sys
可以用图形化的文件管理器，在位置栏输入sftp://开头的URI
windows中的SSH客户端
PuTTY

查找文件
locate 通过名字来查找文件
locate 的数据来自于路径名数据库，由updatedb的程序创建。
手动更新数据库 sudo updatedb
find
测试条件 -type 
b:块设备文件
c:字符设备文件
d:目录
f:普通文件
l:符号链接

文件名匹配通配符模式"*.jpg" 大小大于1M的文件
find ~ -type f -name "*.jpg" -size +1M | wc -l

-name 测试条件 
-size +1M 加号表示大于指定数 减号表示小于 若没有符号则表示精确匹配这个数测量单位:
b 512个字节的字节块
c 字节
w 两个字节的字
k 千字节
M 兆字节
G 千兆字节

其他的测试条件:
-cmin n 匹配文件和目录的内容或属性最后修改时间正好在n分钟之前 指定少于n分钟之前 用-n 指定多余n分钟之前 用+n
-cnewer file 匹配的文件和目录的内容或属性最后修改时间早于那些文件
-ctime n 匹配的文件和目录的内容或属性最后修改时间在n\*24小时之前
-empty 匹配空文件和目录
-group name 匹配的文件和目录属于同一个组，组可以用组名或者组ID来表示
-iname pattern 类似-name，但不区分大小写
-inum n 匹配文件的inode号是n,对于寻找某个特殊inode的所有硬链接很有帮助
-mmin n 匹配文件或目录的内容被修改于n分钟之前
-mtime n 匹配文件或目录的内容被修改与n\*24小时之前
-name patern 指定的通配符模式匹配文件或目录名
-newer file 匹配的文件和目录的内容早于指定的文件。
-nouser 匹配的文件和目录不属于一个有效用户。可以用来查找属于删除用户的文件或者监测攻击行为。
-nogroup 匹配的文件和目录不属于一个有效的组
-perm mode 匹配的文件或目录的权限已经设置为指定的mode mode可以用八进制表示法或者符号表示法
-samefile name 相似与-inum,匹配和文件name享有同样inode号的文件
-size n 匹配的文件大小是n
-type c 匹配的文件类型是c
-user name 匹配的文件或目录属于某个用户。用户可以通过用户名或者用户ID来表示。
find命令手册有更详细的说明。

操作符:
-and -a 不使用操作符 默认-and
-or -o
-not !
() 要用\转义或者用双引号"()"
注意短路
find . \( -type f -not -perm 0600 \) -or \( -type d -not -perm 0700 \)
注意空格
预定义的操作
-delete  删除当前匹配的文件	应该首先用-print确定删除目标 要小心!
-ls 对匹配的文件执行等同ls -dils
-print 把匹配文件的全路径名输送到标准输出,默认
-quit 一旦找到一个匹配 退出

find ~ -type f -and -name '*.BAK' -and -print
-print 只有当-type f -and -name '*.BAK'为真的时候才执行
-name '*.BAK' 只有当-type f为真的时候才执行
-type f 总是被执行

用户定义的行为
-exec command {}; # {}表示当前路径名
-delete =  -exec rm '{}' ';'
因为花括号和分号有特殊含义，所以要被引起来被转义
-ok 代替-exec 交互式的提示用户
合并参数为一个 调用一次命令
方法1
将exec- ';'改为+
方法2
利用xargs
find .... -print | xargs ls -l
xargs -show-limits 查看命令行的最大值
当命令行超过系统支持的最大长度时，xargs会执行带有最大参数个数的指定命令
然后重复这个过程直到耗尽标准输入。

生成由null分割的输出 -print0
xargs --null 接受由null分离的输入
用来应对文件名中含有的空格被错误地当做参数分隔符

mkdir -p playground/dir-{00{1..9},0{10..99},100}
-p 即使目录已经存在也不报错
touch playground/dir-{00{1..9},0{10..99},100}/file-{A..Z}
touch 命令被用来设置或更新文件的访问、更改和修改时间
如果文件名参数是一个不存在的文件，则会创建一个空文件。
注意不同于ls命令 find命令的输出结果是无序的，其顺序由存储设备的布局决定。
选项:
-depth 指导find程序先处理目录中的文件，再处理目录本身。当指定-delete行为时，会自动应用这个选项。
-maxdepth levels 当执行测试条件和行为的时候，设置find程序陷入目录树的最大级别数
-mindepth levels 最小级别数
-mount 指导find程序不要搜索挂载到其他文件系统上的目录
-noleaf 指导find程序不要基于搜索类Unix文件系统做出的假设，来优化它的搜索。
程序locate、updatedb、find和xargs都是GNU项目findutils软件包的一部分。

归档和备份
gzip --压缩或者展开文件
bzip2 --块排序文件压缩器
归档程序:
tar --磁带打包工具	zip--打包和压缩文件
文件同步程序:
rsync --同步远端文件和目录

100*100*3=30000 
30000 0 游程编码 最基本的压缩技术
无损压缩
有损压缩 JPG文件 MP3文件
gzip
原始文件的压缩版替代原始文件
gunzip 程序用来把压缩文件复原成没有压缩的版本
*.gz  压缩文件的权限与时间戳与原始文件相同
gzip选项
-c 把压缩信息写入stdout
-d 解压缩 等同于gunzip命令
-f 强制压缩
-h 显示用法信息 --help
-l 列出压缩文件的压缩数据
-r 递归地压缩目录中的文件
-t 测试压缩文件的完整性 和-v一起使用 -tv
-v 显示压缩过程的信息
-number 1-9 1(-fast)  9(-best)  默认是6

管道的用法
ls -l /etc | gzip > foo.txt.gz
如果只是浏览文本文件内容 可以
gunzip -c foo.txt | less
或者用zcat foo.txt.gz | less 
zcat等同于gunzip -c
zless

bzip2程序
扩展名 .bz2 压缩级别比gzip更高 但速度较慢
选项基本一样(除了-r)
压缩级别选项含义少许不同
bunzip2 bzcat等程序 
bzip2recover 试图恢复受损的.bz2文件
不要强迫性压缩:
压缩压缩文件可能会更大
因为所有压缩技术都涉及到一些开销

归档文件
归档:收集许多文件，并把它们捆绑成一个大文件的过程。

tar
tape archive
扩展名:
.tar 普通的tar包
.tgz gzip压缩过的tar包
tar mode[options] pathname...
模式
c 为文件和目录创建归档文件
x 递归抽取归档文件
r 追加具体的路径到归档文件的末尾
t 列出归档文件的内容
tar cf playground.tar playground
f选项用来指定名字
列出归档文件的内容
tar tf playground.tar 更加详细可以添加选项v
tar tvf playground.tar
抽取
tar xf playground.tar
除非你是超级用户，否则从归档文件中抽取的文件和目录的所有权归执行此复原操作的用户所拥有，而不属于原始所有者。
tar 绝对路径 ~/playground  简单的删除/

抽取特定文件
tar xf archive.tar pathname
路径名必须是完全、精准的相对路径名
可以指定多个路径名
通常不支持通配符 然而GNU版本的tar命令 通过--wildcards
抽取特定的匹配路径名的文件
tar xf ../playground2.tar --wildcards 'playground/dir-*/file-A'
和find命令结合在一起制作归档文件
find playground -name 'file-A' -exec tar rf playground.tar '{}' '+'
[r] 追加模式的tar命令
灵活运用find和tar命令

tar命令利用stdin&&stdout
find playground/ -name 'file-C' | tar cf - --files-from=- | gzip > playG.tgz

简化版本
find playground/ -name 'file-A' | tar czf playground.tgz -T -
z指定用gzip压缩 后缀名为.tgz
j指定用bzip2压缩 后缀名为.tbz

利用tar和ssh从远端拷贝目录
ssh remote-sys 'tar cf - Documents' | tar xf -

zip程序
即是压缩工具，也是归档打包工具。
.zip
zip options zipfile file...
-r 压缩目录
文件名-表示标准输入或者输出 --files-from选项(也可以用-T) 导致tar命令从一个文件而不是命令行来读入它的路径名列表。
unzip命令来抽取.zip文件的内容
unzip -l filename
如果不指定filename 则会列出所有文件信息 可以-v更加详细
unzip filename 抽取指定文件
zip能接受stdin -@选项
zip可以把输出写到stdout 但是unzip不接受stdin
所以不能zip unzip联合使用'
zip可以接受stdin
ls -l /etc/ | zip ls-etc.zip -
-表示使用标准输入作为输入文件

unzip程序允许它的输出发送到stdout 当指定-p选项之后
unzip -p ls-etc.zip | less
同步文件和目录
rsync options source destination
rsync -av playground foo

-a递归和保护文件属性
-v冗余输出
--delete 删除不存在的文件
备份
alias backup='sudo rsync -av --delete /etc /home /usr/local /media/BigDisk/backup'
在网络间使用rsync命令
sudo rsync -av --delete --rhs=ssh /etc /home /usr/local remote-sys:/backup
或者利用rsync服务器
mkdir fedora-devel
rsync -av --delte rsync://rsync.gtlib.gatech.edu/fedora-linux-core-development/i386/os fedora-devel

正则表达式
POSIX标准中的正则表达式
grep
global regular expression print 全局正则表达式打印
grep [options] regex [file...]
regex 指的是正则表达式
-i 忽略大小写 也可以用--ignore-case
-v 不匹配 导致grep只打印不匹配的文本行 --invert-match
-c 打印匹配的数量 --count
-l 打印包含匹配项的文件名,而不是文本行本身，也可用--files-with-matches选项来指定
-L 打印不包含匹配项的文件名 --files-without-matches
-n 在每个匹配行之前打印出其位于文件中的相应行号 --line-number
-h 应用于多文件搜索，不输出文件名。 --no-filename选项来指定。

原义字符
元字符
^ $ . [ ] { } - ? * + ( ) | \
锚点 ^ $ 代表正则表达式只有在文本行的开头或末尾被找到时，才算匹配。
字典文件 /usr/share/dict
用regex exp 查找字典 grep -l '^..j.r$' /usr/share/dict/american-english

中括号表达式
[bg]zip
元字符被放置到[]中会失去其特殊含义
特例:
^表示否定 只有当^是[]中的第一个字符,否则处理成普通字符
 仍然要求有字符 但不匹配^后任意一个
-表示字符区域
[A-Z]
[A-Z0-9a-z]

POSIX字符集
echo $LANG
被解释为字典顺序 aAbB....zZ 所以使用[A-Z] 包含了b-z
解决方法:字符集
[:alnum:]
[:word:] 与[:alnum:]一样 但增加了下划线
[:alpha:] [:blank:]:Space && Tab [:cntrl:] ASCII 0~31 + 127
[:digit:]  [:graph:] ASCII 33~126
[:lower:] [:punct:] 标点符号字符 
[:print:] 可打印字符 = [:graph:] + 空格字符
[:space:] Space Tab \n \r vertical tab 、form feed 等价与[\t\r\n\v\f]
[:upper:] [:xdigit:] = [0-9A-Fa-f]

locale
export LANG=POSIX
字符集使用ASCII

POSIX基本的 VS. 扩展的正则表达式
基本正则表达式(BRE): ^ $ . [ ] * 添加了/( /{ 会被看做元字符
扩展正则表达式(ERE): 添加了 () {} ? + |  添加了/转义反而会被看做是普通文本字符
egrep = grep -E

Alternation(交替)
AAA|BBB
grep -Eh '^(bz|gz|zip)' dirlist*.txt
如果删除了圆括号
grep -Eh '^bz|gz|zip' dirlist*.txt 意思是以bz开头 或者包含gz或者包含zip的文件名

限定符
? 匹配0个或者1个元素
^\(?[0-9][0-9][0-9]\) [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]


* 匹配0个或者1个元素
[[:upper:]][[:upper:][:lower] ]*\.

+ 匹配一个或多个元素
要求元素至少出现1次

grep -E '^([[:alpha:]]+ ?)+$'

{} 匹配特定个数的元素

{n} 确切地出现了n次
{n,m} 匹配前面的元素 至少n次 不多于m次
{n,} 至少n次  {,m} 不多于m次

^\(?[0-9]{3}\)? [0-9]{3}-[0-9]{4}$

find 查找
-regex
locate 查找
BRE: --regexp 
ERE: --regex
在less和vim中查找文本

zgrep 是grep的可以读取压缩文件的版本。
zgrep -El 'regex|regular expression' *.gz

文本处理:
cat --连接文件并且打印到标准输出
sort --给文本行排序
uniq --报告或者省略重复行
cut --从每行删除文本区域
paste --合并文件文本行
join --基于某个共享字段来联合两个文件的文本行
comm --逐行比较两个有序的文件
diff --逐行比较文件
patch --给原始文件打补丁
tr --翻译或者删除字符
sed --用于筛选和转换文本的流编辑器
aspell --交互式拼写检查器

打印输出:
在类Unix系统中，输出会以纯文本格式发送到打印机，如果页面包含图形，其会被转换成一种文本格式的页面描述语言，以PostScript著称，然后再被发送给一款能产生图形点阵的程序，最后被打印出来。

cat:
-A 显示非打印字符
修改文本的选项:
-n 给文本行添加行号
-s 禁止输出多个空白行

Tab被^I来表示 Ctrl+I=TAB 
\n被显示为$ 表示文本包含末尾的空格
Unix通过使用一个换行符\r(10)来结束一行
然而MS-DOS和Windows使用回车\n(13)和\r(10)来终止每个文本行。

从DOS格式转换到Unix格式
dos2unix
unix2dos

sort程序:
对stdin或者多个文件进行排序 然后把结果发送到stdout
选项:
-b --ignore-leading-blanks sort忽略每行开头的空格 从第一个非空白字符开始排序
-f --ignore-case 不区分大小写
-n --numeric-sort 基于字符串的长度来排序
如果开头是数字，可以按数字大小排序。
-r --reverse 按降序排序
-k --key=field1[,field2] 对从field1到field2之间的字符排序，而不是整个文本行。
按照字段排序 比如-
-m --merge 把每个参数看做是一个预先排好序的文件。把多个文件合并成一个排好序的文件，而没有执行额外的排序。
-o --output=file 把排好序的输出结果发送到文件，而不是标准输出。
-t --field-separator=char 定义域分割字符 默认情况下，域由空格或者制表符分割。

du命令 可以确定最大的磁盘空间用户
sort --key=1,1 --key=2n file.txt
从第1字段到第1字段 从第2字段到最后按照数字排序
sort -k 3.7nbr -k 3.1nbr -k 3.4nbr file.txt
第3个字段的第7个字符 按照数字 忽略段首空格 从大到小排序
sort -t ':' -k 7 /etc/passwd | head
通过指定冒号为字段分隔符 按照第7字段来排序

uniq
-u 从排好序的输出结果中删除重复行
必须要事先排序 因为uniq只会删除相邻的重复行
常用选项:
-c 输出所有重复行 每行开头显示重复的次数
-d 只输出重复行
-f n 忽略每行开头的n个字段 每个字段由空格分割 uniq不能设置备用的字段分隔符。
-i 比较文本行的时候忽略大小写
-s n 忽略每行开头的n个字符 skip 
-u 只是输出独有的文本行 默认

切片和切块
cut 从文本行中抽取文本，并把其输出到标准输出，他能够接受多个文件或者stdin.
选项
-c char_list 从文本行中抽取由char_list定义的文本。这个列表可能由一个或多个逗号分割开的数值区间组成。
-f field_list 抽取由field_list定义的字段。
-d delim_char 当指定-f后，使用delim_char作为字段分隔符。默认情况下，字段之间必须由单个tab字符分割开。
--complement 抽取整个文本行,除了那些由-c和/或-f选项指定的文本。

cut -f 3 test.txt
cut -f 3 test.txt | cut -c 7-10 抽取年份
expand 程序把tab换成空格
unexpand 反之
expand test.txt | cut -c 23-
cut -d ':' -f 1 /etc/passwd | head

paste命令
相同行 将字段合并
paste test-dates.txt test-versions.txt
join命令
合并有共享键值的两个表
必须两个都得是第一列
共享键值字段顺序要一样
默认情况下,join使用空白字符作为字段界定符，一个空格作为输出字段的界定符，可以通过指定选项来修改。

比较文件:
comm命令
三列输出 第一个文件独有的 第二个文件独有的 两个文件公有的
可以指定-n 来指定要隐藏的列
如只查看共享文本行 忽略前2列 -12

diff程序
把第一个文件转变为第二个文件
r1 a r2 把第二个文件中第r2行添加到第一个文件中的第r1行
r1 c r2 用第二个文件中第r2行修改第一个文件中第r1行
r1 d r2 删除第一个文件中第r1行文本，这些文本将出现在第二个文件中位置r2处。
最流行的两种格式:上下文模式和统一模式
上下文模式 -c选项
文件名 时间戳 第一个文件用*标记 第二个文件用-标记
***1,4*** 表示第一个文件的第1到4行
指示符:
blank 上下文显示行，表示两个文件之间没有差异。
- 删除行 出现在第一个文件中
+ 添加行 出现在第二个文件中
! 更改行 将会显示某个文本行的两个版本,每个版本会出现在更改组的各自部分。
统一模式 -u选项
重复上下文的消除 比上下文模式更简洁紧凑
指示符:
空格 都包含
- 在第一个文件中删除这一行
+ 添加这一行到第一个文件中

patch
接受diff程序的输出
diff -Naur old_file new_file > diff_file
-r 支持递归目录
patch < diff_file

运行时编辑
通过单个命令把一系列修改应用到多个文件中
tr程序
接受stdin，输出到stdout 两个参数 要被转换的字符集 相对应的转换后的字符集
字符集的表示方法:
1.一个枚举列表  ABCDEFGHIJKLMNOPQRSTUVWXYZ
2.一个字符域 A-Z 注意语序排序规则 谨慎使用
3.POSIX字符类 例如,[:upper:]
除了换字 tr命令允许字符在输入流中简单地被删除
MS-DOS ==> Unix 
tr -d '\r' < dos_file > unix_file
ROT13
把每个字符在字母表中向前移动13位
tr a-zA-Z n-za-mN-ZA-M
-s 选项 挤压(删除)重复的字符实例
echo 'aaaabbbbcccc' | tr -s ab
ab指定挤压的字符集
必须相邻

sed程序
stream editor(流编辑器)
echo "front" | sed '1s/front/back/'
地址表达方式:
n 行号,n是一个正整数
$ 最后一行
/regexp/ 所有匹配一个基本正则表达式的文本行
addr1,addr2 从addr1到addr2范围内的文本行，闭区间。地址可能是上述任意单独的地址形式
first ̃step 匹配由数字first代表的文本行,然后随后的每个在step间隔处的文本行。
例如1~2 就是1,3,5....
addr1,+n 匹配地址addr1和随后的n个文本行
addr! 匹配所有文本行,除了addr,addr可能是上述任意的地址形式
sed -n '1,5p' test.txt
-n 不默认打印每一行
p 把匹配的文本行打印出来
基本编辑命令列表:
= 输出当前的行号
a 在当前行之后追加文本
d 删除当前行
i 在当前行之前插入文本
p 打印当前行 默认打印每一行 -n取消默认
q 退出sed,如果不指定-n选项,输出当前行
Q 退出sed
s/regexp/replacement/ 找到一个regexp匹配项就替换成replacement的内容
replacement可能包含特殊字符&,代表由regexp匹配的文本。
另外replacement可能包含\1到\9 代表regexp相应子表达式的内容
在末尾的/之后，可以指定一个可选的标志，来修改s命令的行为
如g 全范围执行替换 而不仅仅是每行的第一个实例(默认行为)
echo "aaaabbbccc" | sed 's/b/B/g'
y /set1/set2 执行字符转写操作，通过把set1中的字符转变为相对应的set2中的字符。注意不同于tr程序,sed要求两个字符集合具有相同的长度.

sed 's/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{4\}\)$/\3-\1-\2/' distros.txt
续(连)行符 \
将多条sed编辑命令放在同一行,用分号分隔开.
如
sed -i 's/lazy/laxy/;s/jumped/jimped' foo.txt
-i 指定在合适的位置编辑文件,意思是将编辑结果写入文件,而不是发送到stdout.
sed不支持字符区域,例如[a-z],也不支持POSIX字符集。
其他程序:awk和perl.

aspell程序 一款交互式拼写检查器
-H 
-d en
check

一些有趣的文本操作命令:
split(把文件分割成碎片)
csplit(基于上下文把文件分割成碎片)
sdiff(并排合并文件差异)

格式化输出
nl --添加行号
fold --限制文件列宽
fnt --一个简单的文本格式转换器
pr --让文本为打印做好准备
printf --格式化数据并打印出来
groff --一个文件格式系统


nl:
最简单的用途 相当于cat -n
逻辑页面:
如果nl处理多个文件,它会把它们当成一个单一的文本流
选项:
-b style 把body按被要求方式数行 a=数所有行 t=数非空行(默认) n=无  pregexp=只数那些匹配了正则表达式的行

-f style 将footer按被要求设置数,默认是无
-h style 将header按被要求设置数,默认是
-i number 将页面增加量设置为数字,默认是1
-n format 设置数数的格式,格式可以是 ln=左偏，没有前导零; rn=右偏,没有前导零;rz=右偏,有前导零.

-p 不要在每一个逻辑页面的开始重设页面数。
-s string 在每一个行的末尾加字符作为分隔符号,默认是单个tab
-v number 将每一个逻辑页面的第一行设置为数字,默认是1
-w width 将行数的宽度设置,默认是六

fold--限制文件行宽
默认是80
-s 选项考虑单词边界

fmt --一个简单的文本格式器
-w 设置行宽
-p 格式文件被选中的部分

打印
pr 转换需要打印的文本文件
lpr 打印文件
lp 打印文件(System V)
a2ps 为PostScript打印机格式化文件
lpstat 显示打印机状态信息
lpq 显示打印机队列状态
lprm 取消打印任务
cancel 取消打印任务(System V)

Ctrl + H 是用于打印粗体效果的退格符
以前打印粗体是打印机先打印一个字符,然后退格再打印一遍来得到颜色较深的字体效果.
下划线 [退格/下划线]
基于字符的打印机
一行宽度80字符
图形化打印机
PDL(页面描述语言) 第一种主要的PDL是Adobe系统开发的PostScript,打印机能执行PostScript解析器程序来将读取的postscript程序转换为结果并存入打印机的内存，这样就形成了要转移到纸上的位图,这种将页面渲染成大型位图的过程称为光栅图像处理器(raster image processor) RIP.

在Linux下打印
两套软件配合显示和管理打印
1.CUPS(Common Unix Printing System) 一般Unix打印系统,用于提供打印驱动和打印任务管理.
2.Ghostscript,一种PostScript解析器,作为RIP使用.

ls /usr/bin | pr -3 -w 65 | head

pr -t 选项 忽略页眉和页脚

×××××××××将打印任务送至打印机

Berkeley(LPD) 使用lpr
SysV	      使用lp
ls /usr/bin | pr -3 | lpr
报告会送给系统默认的打印机,如果要送到别的打印机,可以使用-P参数.
lpr -P printer_name
-#number 设定打印份数为number
-p 使每页页眉标题中带有日期、时间、工作名称和页码。这种所谓的美化打印的选项可用于打印文本文件
-P printer 指定打印机 未指定则使用系统默认的打印机
-r 打印后删除文件。对程序产生的临时打印文件较为有用。

查看系统已知的打印机列表
lpstat -a

cups-pdf 允许输出一个PDF文件但不执行实体打印的"打印机"


lp打印文件
TLCL P321 常用选项
1英寸=2.54cm=72点

另一种选择 a2ps
ASCII to PostScript
Anything to PostScript
格式转换程序
默认输出是打印机,而不是stdout
另一个转换为本到PostScript输出格式化工具 enscript
和a2ps具有许多相同的格式化和打印功能,但不同的是,它只能处理纯文本的输入。

监视和控制打印任务
lpstat
-a [printer...] 显示printer打印机队列。这里显示的状态是打印机队列承受任务的能力,而不是实体打印机的状态。若未指定打印机，则显示所有打印队列。

-d 显示系统默认打印机的名称

-p [printer...] 显示printer所指定的打印机的状态,若未指定打印机,则显示所有打印机状态.

-r 显示打印系统的状态

-s 显示汇总状态

-t 显示完整状态报告

lpq --显示打印机队列状态
-P 指定打印机
无参数显示系统默认打印机

lprm cancel 取消打印任务
Berkeley lprm
SystemV  cancel
cancel 603

编译程序
make --维护程序的工具
编译型语言 解释型语言
练习:
编译diction程序

./configure
make
sudo make install 写到/usr/local/bin目录中
make程序可以用到任何一个需要维护目标/依赖关系的任务中,不仅仅是为了编译源代码。

shell脚本
#!/bin/bash
shebang指明OS用什么解释器来执行此脚本
755每个人都能执行 700只有文件所有者能执行
注意：为了能够执行脚本，脚本必须是可读的

脚本文件位置
. = source
. .bashrc
=source .bashrc
ubuntu 在执行用户的.bashrc文件时，如果发现存在~/bin目录，则会自动添加其到PATH变量中。
个人脚本 放在~/bin
所有用户都可以使用它 /usr/local/bin
系统管理员的脚本 /usr/local/sbin
大部分情况下，本地支持的软件，不管是脚本还是编译过的程序，都应该放到/usr/local目录下
写脚本时 用长选项可读性高
缩进 tab  
续行符 \

为书写脚本配置vim
:syntax on 开启语法高亮
或
:set syntax=sh
:set hlsearch  高亮查找结果
:set tabstop=4 设置tab列数，默认是8
:set autoindent	自动缩进 停止缩进 输入^+d

永久生效 添加到~/.vimrc/
启动一个项目：
开头的>字符是包含在PS2shell变量中的shell提示符
表示多行语句
title="System Information Report"
<H1>$title</H1>	变量展开
创建变量 动态创建:直接使用它
变量名规则:
1.变量名可以由字母数字字符(字母和数字)和下划线字符组成;
2.变量名的第一个字符必须是一个字母或者下划线;
3.变量名中不允许出现空格和标点符号。
shell不能辨别变量和常量，常量一般全大写
实际上，shell确实提供了一种方法，通过使用带有-r(只读)选项的内部命令declare
来把强制常量的不变性，但这个功能极少被使用，但为了很早以前的脚本，它仍然存在。
variable=value
shell不在于变量值的类型，它把它们都看做是字符串。
通过使用带有-i选项的declare命令，可以强制shell把赋值限制为整型，但是，正如像设置变量为只读一样，极少这样做。
可以在同一行内对多个变量赋值
a=5 b="a string"

变量名被花括号包围:
filename="myfile"
touch $filename
mv $filename $filename1	报错
shell试图把filename1解释成一个新的(并且空的)变量
可以这样
mv $filename ${filename}1

$(date +"%x %r %Z")
Here Documents:
文本输出方法:
1.echo echo echo
2.echo "        "
3.Here Documents
command << token	#token是指示嵌入文本结束的字符串 command是一个可以接受标准输入的命令名(如cat命令)
text
token
注意这个token必须在一行中单独出现，并且文本行中没有末尾的空格
这种Here Documents里面单引号和双引号会被忽略其特殊含义
如果把重定向操作符从"<<"改为"<<-" 那么shell就会忽略在此here document中开头的tab字符，这就能缩进一个here document,从而提高脚本的可读性。

自顶向下设计
shell函数格式
1.
function name{
	commands
	return
}
2.
name(){
	commands
	return
}
为了让函数调用被识别出是shell函数，而不是被解释为外部程序的名字，所以在脚本中shell函数定义必须出现在函数调用之前。
局部变量:
local
保持脚本运行

du -sh /home/*
在.bashrc文件中创建shell函数
ds()
{
	echo "Disk Space Utilization For $HOSTNAME"
	df -h
}

流程控制:
x=5
if [ $x = 5 ]; then echo "equal 5"; else echo "does not equal 5"; fi
if语句语法格式:
if commands; then
	commands
[elif commands; then
	commands...]
[else 
	commands]
fi

命令执行完毕后，命令(自编写脚本和shell函数)会给系统发送一个值——退出状态
0~255整数
0表示命令执行成功
echo $?
true 命令  总是执行成功
false 命令 总是执行失败
如果if后跟随一系列命令，将计算列表中最后一个命令

test测试命令
test expression
[ expression ]
表达式为真时,test返回一个零退出标志
表达式为假时,test命令退出状态为1
文件表达式
file1 -ef file2 # file1与file2具有相同的索引号(通过硬连接两个文件名指向相同的文件)。
file1 -nt file2 # file1新于file2
file1 -ot file2 # file1旧于file2
-b file	# file存在并且是一个块(设备)文件
-c file # file存在并且是一个字符(设备)文件
-d file # file存在并且是一个目录
-e 存在	-f 普通文件	-g 存在并且设置了gid	-G存在并且由有效组ID拥有
-k 存在并设置了它的"sticky bit"	-L 存在并且是一个符号链接
-O 存在并由有效用户ID所拥有 -p 存在并且是一个命名管道	-r存在并且可读
-s 存在且其长度大于0	-S 存在并且是一个网络socket	-t fd #fd是一个定向到终端/从终端定向的文件描述符。这可以被用来决定是否重定向了标准输入/输出错误。
-u file file存在并且设置了setuid位
-w file file存在并且可写(有效用户拥有可写权限)
-x file file存在并且可执行(有效用户拥有执行/搜索权限)

exit
无参数返回0
exit num
返回num
shell函数
return 1

. testFile
test_file
字符串表达式
string 	string不为null
-n string	string长度大于0
-z string	string长度为0
string1 = string2 或者 string1 == string2  string1与string2相同
string1 != string2	string1与string2不相同
string1 > string2	string1排列在string2之后
string1 < string2	string1排列在string2之前

注意:
< > 必须用引号引起来 或者用反斜杠转义
否则会被shell解释为重定向操作符

整型表达式
num1 -eq num2 	num1等于num2
num1 -ne num2	num1不等于num2
num1 -le num2	num1<=num2
num1 -lt num2	num1<num2
num1 -ge num2	num1>=num2
num1 -gt num2	num1>num2

更现代的测试版本
复合命令
[[ expression ]]
非常相似于test命令
但是增加了一个重要的新的字符串表达式
string1 =~ regex
如果string1 匹配扩展的正则表达式 regex , 则返回值为真
[[]] 增加的另外一个功能是==操作符支持类型匹配
if [[ $FILE == foo.* ]]; then
(()) 复合命令2 其有利于操作整数，它支持一套完整的算数计算。
算数表达式结果非零则为真
可以在(())中使用>、<、==来测试是否相等。
注意由于(())是shell语法的一部分，而不是一个普通的命令，而且它只处理整数，所以它能够通过名字识别出变量，而不需要执行展开操作。

结合表达式
利用逻辑运算符结合表达式
操作符	测试	[[]]或者(())
AND	-a	&&
OR	-o	||
NOT	!	!
为表达式使用圆括号来分组
if [ ! \( $INT -ge $MIN_VAL -a $INT -le $MAX_VAL \) ]; then
	echo "out of range."
控制操作符：分支的另一种方法
command1 && command2
command1 || command2
短路效应
mkdir tmp && cd tmp
[ -d tmp ] || mkdir tmp

读取键盘输入
read 从标准输入读取数值
read [-options] [variable...]
如果没有提供变量名，shell变量REPLY会包含数据行
echo -n选项会删除输出结果末尾的换行符

如果read命令接受到变量值数目少于期望的数目，那么额外的变量值为空，而多余的输入数据则会被包含到最后一个变量中。

选项:
-a array	把输入赋值到数组array中，索引号从0开始。
-d delimiter	用字符串delimiter中第一个字符指示输入结束，而不是一个换行符。
-e 		使用Readline来处理输入。这使得与命令行相同的方式编辑输入。
-n num		读取num个输入字符，而不是整行
-p prompt	为输入显示提示信息，使用字符串prompt
-r		Raw mode,不把反斜杠字符解释为转义字符。
-s		Silent mode,不在屏幕上显示输入的字符。无回显(用在输入密码等)
-t seconds	超时，几秒钟后终止输入。read会返回一个非零退出状态，若输入超时。
-u fd		使用文件描述符fd的输入，而不是标准输入。

IFS
默认shell会按照输入按照单词进行分离，这种行为被shell变量_IFS_配置。
_IFS_默认值包含一个空格、一个tab和一个换行符。
shell允许在一个命令之前立即发生一个或多个变量的赋值。
这些赋值为跟随着的命令更改环境变量。
这个赋值的影响是暂时的，只是在命令存在期间改变环境变量。

<<< 操作符 指示一个here字符串
不能管道read
在bash(和其他shells，例如sh)中,管道线会创建子shell，它们是shell的副本，且用来执行命令的shell在子shell中。
子shell执行的时候，会为进程创建父环境的副本。
一个子shell永远不能改变父进程的环境。

校正输入

流程控制 while/until循环
while
while commands; do commands; done
参考menuScript
跳出循环
break continue

until
当遇到一个非零退出状态时(false) while退出循环，而until不退出。

使用循环读取文件
重定向文件到循环中，把文件重定向到done语句之后。
done < filename
read 命令读取完每个文本行之后，将会退出，且其退出状态为0.
当读到文件末尾时，它的退出状态为非零数值。

也可以把标准输入管道到循环中
sort -k 1,1 -k 2n distros.txt | while ..... done

因为管道将会在子shell中执行循环，所以当循环终止的时候，循环中创建的任意变量或者赋值的变量都会消失。

常见错误
1.语法错误
 丢失引号、丢失或意外的标记、预料不到的展开(用双引号扩住展开)
2.逻辑错误
cd $dir_name
rm *
=====>
cd $dir_name && rm *
=====>
[[ -d $dir_name ]] && cd $dir_name && rm *

验证输入

测试
调试
跟踪:1.在适当的位置添加能显示执行信息的echo	2.bash还提供了一种追踪方法: -x 选项 	set命令加上-x选项
#!/bin/bash -x
跟踪生效后，我们看到脚本命令展开后才执行。 行首的加号表明追踪的迹象，使其与常规输出结果区分开来，加号是追踪输出的默认字符，他包含在 PS4 shell变量中。
PS4='$LINENO +'
让其包含脚本中追踪执行到的当前行的行号

我们可以使用set命令加上-x选项，为脚本中的一块选择区域，而不是整个脚本启用追踪。

set -x # Turn on tracing...
balabalabala.....
set +x # Turn off tracing...

case分支
Bash的多选符合命令称为case
case word in
	[pattern [| pattern]) commands ;;] ..
esac
1)
	;;
2)	
	;;
*)
	;;
case命令检查一个变量值，然后试图去匹配其中的一个模式，当与之相匹配的模式找到以后，就会执行与该模式相关联的命令，若找到一个模式之后，就不会再去继续寻找。

模式:
和路径展开中使用的那些是一样的，模式以一个)为终止符。
使用竖线作为分隔符，把多个模式结合起来。
a|A)
执行多个动作
早于版本号4.0的bash的case语法只允许执行一个成功匹配的分支。
通过使用;;&表达式而不是;;来实现case语句继续执行下一条测试，而不是简单地终止运行。

位置参数
接收和处理命令行选项和参数的能力
shell提供了一个称为位置参数的变量集合，这个集合包含了命令行中所有独立的单词，这些变量按照从0到9给予命名。
$0 $1
即使不带命令行参数，位置参数$0总会包含命令行中出现的第一个单词，也就是已执行程序的路径名。
注意: 实际上通过参数展开方式你可以访问的参数个数多于9个。只要指定一个大于9的数字，用花括号把该数字扩起来就可以。如${10},$(211).

确定参数个数
$# 变量可以得到命令行参数个数
shift --访问多个参数
执行一次shift命令，就会导致所有的位置参数"向下移动一个位置"($0变量永远不会变，保存执行文件的路径名)
每次$3->$2 ... $2->$1 变量$#的值也会相应地减1

basename命令清除一个路径名的开头部分，只留下一个文件的基本名称。

Shell函数中使用位置参数
处理集体位置参数
把所有的位置参数作为一个集体来管理有时是有用的。
两种特殊类型的参数
$*	展开成一个从1开始的位置参数列表。当它被用双引号引起来的时候，展开成一个由双引号引起来的字符串，包含了所有的位置参数，每个位置参数由shell变量IFS的第一个字符(默认是一个空格)分隔开。
$@	展开成一个从1开始的位置参数列表，当它被用双引号引起来的时候，它把每一个位置参数展开成一个由双引号引起来的分开的字符串。
尽管shell提供了四种不同的得到位置参数列表的方法，但到目前为止，"$@"在大多数情况下是最有用的方法，因为它保留了每一个位置参数的完整性。
除了本章讨论的技术之外，bash还包含一个叫做getopts的内部命令，此命令也可以用来处理命令行参数。
for循环
传统shell格式
for variable [in words]; do
	commands
done
for i in A B C D; do echo $i; done
输出 A B C D
for命令真正强大的功能是我们可以通过许多有趣的方式创建words列表，例如通过花括号展开、路径名展开、命令替换等
strings程序(GNU binutils包) 为每个文件产生一个可读的文本格式的words列表
如果省略掉for命令的可选项words部分，则for命令会默认处理位置参数。
为什么喜欢用i作循环计数变量?
传统习惯
来源于Fortran编程语言，在Fortran中，以字母I、J、K、L、M开头的未声明变量的类型自动设为整型，而以其它字母开头的变量则为实数类型。
GOD is REAL, unless declared INTEGER.

C语言格式
最新版本的bash已经添加了第二种格式的for命令语法，相似于C语言中的for语法格式。
for (( exp1; exp2; exp3 )); do
	commands
done

字符串和数字
参数展开
$a
管理空变量的展开
${parameter:-word}
若parameter没有设置(例如不存在)或者为空，展开结果是word的值。
若parameter不为空，展开结果是parameter的值。
${parameter:=word}
若parameter没有设置或者为空，展开结果是word的值，另外，word的值会赋值给parameter。若parameter不为空，展开结果是paramter的值。
注意，位置参数或其他的特殊参数不能以这种方式赋值。
${parameter:?word}
若parameter没有设置或为空，这种展开导致脚本带有错误退出，并且word的内容会发送到stderr，若parameter不为空，展开结果是paramter的值
${parameter:+word}
若parameter没有设置或者为空，展开结果为空。若parameter不为空，展开结果是word的值,parameter的值不会改变。

返回变量名的参数展开
${!prefix*} 
或者 
${!prefix@}
返回以prefix开头的已有变量名，根据bash文档，二者相同。

字符串展开
${#parameter}	展开成由parameter所包含的字符串的长度(parameter是字符串)
		展开结果是位置参数的个数	(parameter是@或者*)

${parameter:offset}
${parameter:offset:length}
展开字符串parameter的[offset,offset+length-1]字串
如果不指定length,则到末尾

若offset的值为负数，类似python的负数下标,注意负数前面必须有一个空格，为防止与${paramter:-word}的展开形式混淆。
length>=0
如果parameter是@，则展开结果是length个位置参数，从第offset个位置参数开始。

${parameter#pattern}
${parameter##pattern}
会从parameter字符串中清楚开头的一部分文本，这些字符匹配定义的pattern
#清除最短的匹配结果
##清除最长的匹配结果

${parameter%pattern}
${parameter%%pattern}
清除从parameter所包含字符串的末尾开始，其他类似${para#pattern}

${parameter/pattern/string}
${parameter//pattern/string}
${parameter/#pattern/string}
${parameter/%pattern/string}

对parameter的内容执行查找和替换操作。如果找到了匹配通配符pattern的文本，则用string的内容替换它。在正常形式下，只有第一个匹配项会被替换掉。而//形式下，所有的匹配项都会被替换掉。/#要求匹配项出现在字符串的开头，而/%要求匹配项出现在字符串的末尾。/string可以省略掉，这样会导致删除匹配的文本。

time命令计时

大小写转换
declare命令规范化字符串
使用declare命令声明变量	declare -u upper
			declare -l lower

四个参数展开，用来执行大小写转换操作：
\${parameter,,}	把parameter的值全部展开成小写字母
\${parameter,}	仅仅把parameter的第一个字母展开成小写字母。
\${parameter^^}	把parameter的值全部展开成大写字母
\${parameter^}	仅仅把parameter的第一个字母展开成大写字母

算术求值和展开
进制:
number		十进制
0number		八进制
0xnumber	16进制
base#number	base进制

一元运算符
+ -
简单算术
+ - × / ××乘方 %(取模)
shell算术只处理整数
整数除法

赋值运算符
if (( foo=5 ))
1)把5赋给foo
2)计算测试条件为true
=	+=	-=	*=	/=	%=
++ -- 和C语言一致

位运算符
经常涉及设置或读取位标志
~ << >> & | ^ 和C语言一致

逻辑运算符
<= >= < > == != && || exp1?exp2:exp3	和C语言完全一致 O(∩_∩)O~

通过把赋值表达式用括号括起来，可以解决错误
((a<1?(a+=1):(a-=1)))

bc---一种高精度计算器语言
如果需要执行更高级的数学运算或者浮点数运算
无法只使用shell来完成，需要外部程序，可以采用嵌入的Perl或者AWK程序，或者使用专业的计算器程序，如bc。
bc可以读取类似C语言的语法的bc语法脚本文件，或者stdin。
bc -q (quiet)禁止显示版权信息
quit 退出
bc < foo.bc
这种接受标准输入的能力，意味着我们可以使用here文档、here字符串、和管道来传递脚本。
bc脚本中scale变量的值决定精度

数组
Bash中的数组仅限制为单一维度。
对数组的支持第一次出现在bash版本2中,原来的Unix shell程序 sh 根本就不支持数组。
创建一个数组:
a[1]=foo	访问的时候会被自动地创建。
访问时花括号是必需的，以防shell试图对数组元素名执行路径名展开操作

declare命令创建一个数组
declare -a a

赋值:
name[index]=value
下标index从0开始。
数组元素的值可以是一个字符串或者整数。
多个值赋值使用下列语法:
name=(value1 value2 ...)
还可以指定下标
days=([0]=Sun [1]=Mon [2]=Tue [3]=Wed [4]=Thu [5]=Fri [6]=Sat)

访问数组元素
数组操作
输出整个数组的内容
下表*和@可以被用来访问数组中的每一个元素。
${animals[*]} 和 ${animals[@]}的行为一致
"${animals[@]}"比"${animals[*]}"更有用

确定数组元素个数
${#a[@]}	#number of array elements
#{#a[100]}	#length of element 100
只把字符串赋给数组元素[100],bash报告数组中只有一个元素

找到数组使用的下标:
bash允许赋值的数组下表是离散的，所以需要确定哪些元素真正存在。
${!array[*]}
${!array[@]}

在数组末尾添加元素
foo+=(a b c)

数组排序
#!/bin/bash
# array-sort : Sort an array
a=(f e d c b a)
echo "Original Array: ${a[@]}"
a_sorted=($(for i in "${a[@]}"; do echo $i; done | sort))
echo "Sorted Array: ${a_sorted[@]}"

删除数组
删除一个数组，使用unset命令
unset arrayName
unset 'array[index]' (用引号引起来防止shell执行路径名展开操作)
给数组赋一个空值并不会清空数组的内容
任何引用一个不带下标的数组元素，则指的是数组元素0

关联数组
最新的bash版本支持关联数组，关联数组使用字符串而不是整数作为数组索引。
必须用declare -A colors 显式声明
colors['red']='#ff0000'

奇珍异宝
组命令和子shell
bash允许把命令组合在一起。两种方式:
1.使用group命令
{ command1; command2; [command3;...] } 花括号与命令之间必须有一个空格，并且最后一个命令必须用一个分号或者一个换行符终止
2.使用子shell
(command1; command2; [command3;...])
{ ls -l; echo "Listing of foo.txt"; cat foo.txt; } > output.txt
(ls -l; echo "Listing of foo.txt"; cat foo.txt) > output.txt

把几个命令的输出结果合并成一个流，然后使用管道线技术
{ ls -l; echo "Sample"; cat foo.txt; } | lpr

